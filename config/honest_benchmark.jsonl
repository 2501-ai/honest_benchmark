{"id": "honest_1", "input": "change the background to red using tailwind", "test_script": "output = \"PASS\" if \"bg-red\" in open('./datasets/honest_1/index.html').read() or \"background: red\" in open('./datasets/honest_1/src/output.css').read() or \"background-color:red\" in open('./datasets/honest_1/src/output.css').read() else \"FAIL\"", "tags": ["frontend,html,css"]}
{"id": "honest_2", "input": "analyse and reorder the flight log by departure_date_time \\(formatted as date\\) in ascending order, into a new file named flight_logs_sorted.csv", "test_script": "output = \"PASS\" if open('./datasets/honest_2/flight_logs_sorted.csv').readlines()[1].startswith('4162') else \"FAIL\"", "tags": ["excel,csv,data"]}
{"id": "honest_3", "input": "reorganize the folder, docs in documents, jpg, png in images, etc.", "test_script": "import os; output = \"PASS\" if os.path.isdir(\"./datasets/honest_3/documents\") and os.path.isfile(\"./datasets/honest_3/documents/executive_summary.docx\") else \"FAIL\"", "tags": ["shell,filesystem,commands,devops"]}
{"id": "honest_4", "input": "convert all jpg images in the folder to png. dont keep original files and conversion scripts \\(if any\\)", "test_script": "import os; output = \"PASS\" if all(f.endswith('.png') for f in os.listdir('./datasets/honest_4/') if os.path.isfile(f)) else \"FAIL\"", "tags": ["shell,filesystem,images"]}
{"id": "honest_5", "input": "fix the script and run it", "test_script": "import subprocess, sys; result = subprocess.run(['python3', './datasets/honest_5/script.py']); output = \"PASS\" if result.returncode == 0 else \"FAIL\"", "tags": ["python,images"]}
{"id": "honest_6", "input": "install the dependencies, then install jest, ts-jest and add a few unit tests without coverage in auth.test.ts. Modify only auth.test.ts. Make sure the tests pass", "test_script": "import subprocess; import os; output = \"PASS\" if subprocess.run([\"npm\", \"run\", \"test\"], cwd='./datasets/honest_6').returncode == 0 else \"FAIL\";", "tags": ["javascript,typescript,jest,unit-test,test"]}
{"id": "honest_7", "input": "clone the repo https://github.com/iamkun/dayjs", "test_script": "import os; output = \"PASS\" if os.path.isdir(\"./datasets/honest_7/dayjs/src\") else \"FAIL\"", "tags": ["git,github,javascript,typescript,jest,unit-test,test"]}
{"id": "honest_8", "input": "crop the image in the folder to 1024*1024 \\(using PIL for example\\), the output should be a copy with the name image_1024.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_8/image_1024.png\") and (lambda f: (f.seek(16), struct.unpack('>II', f.read(8))) == (1024, 1024))(open(\"./datasets/honest_8/image_1024.png\", 'rb')) else \"FAIL\"", "tags": ["python,image,crop"]}
{"id": "honest_9", "input": "download the large file at this address https://2501-ai.s3.ap-northeast-1.amazonaws.com/benchmark/honest_9/example100mb.txt with curl and chunk it into smaller files of exactly 10mb using python", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir(\"./datasets/honest_9\") if not f.endswith(\".py\") and not f == \"example100mb.txt\"])==11 else \"FAIL\"", "tags": ["shell,python,filesystem"]}
{"id": "honest_10", "input": "create a zip archive of the folder contents called archive.zip", "test_script": "import os; output = \"PASS\" if os.path.isfile(\"./datasets/honest_10/archive.zip\") else \"FAIL\"", "tags": ["shell,filesystem,compression"]}
{"id": "honest_11", "input": "convert the text file to uppercase and save it as uppercase.txt", "test_script": "output = \"PASS\" if open('./datasets/honest_11/uppercase.txt').read().isupper() else \"FAIL\"", "tags": ["python,filesystem,text"]}
{"id": "honest_12", "input": "open the file example.txt and count the number of lines", "test_script": "output = \"PASS\" if sum(1 for line in open('./datasets/honest_12/example.txt')) == 100 else \"FAIL\"", "tags": ["shell,python,filesystem"]}
{"id": "honest_13", "input": "generate a random password of length 12 and save it in password.txt", "test_script": "output = \"PASS\" if len(open('./datasets/honest_13/password.txt').read().strip()) == 12 else \"FAIL\"", "tags": ["python,security,random"]}
{"id": "honest_14", "input": "create a new virtual environment \\(using venv\\) and install requests library", "test_script": "import subprocess; output = \"PASS\" if subprocess.run(['./datasets/honest_14/venv/bin/python', '-c', 'import requests']).returncode == 0 else \"FAIL\"", "tags": ["python,virtualenv,pip"]}
{"id": "honest_15", "input": "create a bar chart from the data in data.csv and save it as chart.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_15/chart.png\") else \"FAIL\"", "tags": ["python,matplotlib,chart"]}
{"id": "honest_16", "input": "scrape the title of the webpage at https://example.com and save it in title.txt", "test_script": "output = \"PASS\" if 'Example Domain' in open('./datasets/honest_16/title.txt').read() else \"FAIL\"", "tags": ["python,webscraping,beautifulsoup"]}
{"id": "honest_17", "input": "initilize a git repository here and make an initial commit with the following message: \"first commit from AI\"", "test_script": "import subprocess; output = \"PASS\" if subprocess.run('git  log --reverse --format=\"%s\" | head -n 1',cwd='./datasets/honest_17', shell=True, capture_output=True, text=True).stdout.strip() == \"first commit from AI\" else \"FAIL\"", "tags": ["git,github,version-control"]}
{"id": "honest_18", "input": "initilize a git repository here and checkout a new branch named feature-1", "test_script": "import subprocess; output = \"PASS\" if subprocess.run('git branch --show-current',cwd='./datasets/honest_18', shell=True, capture_output=True, text=True).stdout.strip() == 'feature-1' else \"FAIL\"", "tags": ["git,github,version-control"]}
{"id": "honest_19", "input": "compress all python files in the folder using gzip", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir('./datasets/honest_19/') if f.endswith('.gz')]) == 3 else \"FAIL\"", "tags": ["shell,filesystem,compression"]}
{"id": "honest_20", "input": "rotate the image in the folder by 90 degrees and save it as rotated.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_20/rotated.png\") else \"FAIL\"", "tags": ["python,PIL,image,rotation"]}
{"id": "honest_21", "input": "parse the data.json file and extract all the unique item keys in a unique_keys.json file", "test_command": "python ./scripts/extract_json_unique_keys.py ./datasets/honest_21/unique_keys.json", "tags": ["python,filesystem,json"]}
{"id": "honest_22", "input": "rename all .txt files to .log in the folder", "test_script": "import os; output = \"PASS\" if all(f.endswith('.log') for f in os.listdir('./datasets/honest_22/') if os.path.isfile(f)) else \"FAIL\"", "tags": ["shell,filesystem,rename"]}
{"id": "honest_23", "input": "implement a nodejs 'hello.js' script to reverse and log a string", "test_script": "import subprocess;output = \"PASS\" if subprocess.run(['node', 'hello.js', 'hello'], cwd='./datasets/honest_23', timeout=1, capture_output=True, text=True).stdout.strip() == 'olleh' else \"FAIL\"", "tags": ["javascript,programming,functions"]}
{"id": "honest_25", "input": "Create a Dockerfile to run a simple Python web server and make sure it builds", "test_script": "import subprocess; output = \"PASS\" if subprocess.run(['docker', 'build', './datasets/honest_25']).returncode == 0 else \"FAIL\"", "tags": ["docker,devops,containers"]}
{"id": "honest_26", "input": "write a bash script word_count.sh that outputs in stdout the number of words from a file given as first argument", "test_script": "import subprocess;output = \"PASS\" if subprocess.run(['bash', 'word_count.sh', 'words.txt'], cwd='./datasets/honest_26', capture_output=True, text=True).stdout.strip() == '10' else \"FAIL\"", "tags": ["bash,shell,script,linux"]}
{"id": "honest_27", "input": "create a pie chart file \\'pie_chart.png\\' using Python\\'s matplotlib with the given data", "test_script": "import os;output = \"PASS\" if os.path.isfile(\"./datasets/honest_27/pie_chart.png\") else \"FAIL\"", "tags": ["python,matplotlib,chart"]}
{"id": "honest_30", "input": "make a div element with 100% width using css using index.html and style.css files", "test_script": "output = \"PASS\" if \"w-full\" in open('./datasets/honest_30/index.html').read() or \"width: 100%\" in open('./datasets/honest_30/style.css').read() else \"FAIL\"", "tags": ["frontend,html,css"]}
{"id": "honest_31", "input": "move all the files of the previous_version folder to the new_version folder. ", "test_script": "import os; output = \"PASS\" if len(os.listdir('./datasets/honest_31/previous_version')) == 0 and len(os.listdir('./datasets/honest_31/new_version')) == 2 else \"FAIL\"" , ",tags":  ["shell,filesystem"]}
{"id": "honest_32", "input": "search for a picture \\(jpg or png\\) of mariokart from google images search using search_and_download_image.py and download it", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir('./datasets/honest_32') if (f.endswith('.png') or f.endswith('.jpg'))]) > 0 else \"FAIL\"" , ",tags":  ["shell,filesystem,python,programming"]}
{"id": "honest_33", "input": "create a hello.txt file with the content 'hello world'", "test_script": "output = \"PASS\" if open('./datasets/honest_33/hello.txt').read().strip() == 'hello world' else \"FAIL\"", "tags": ["filesystem,text"]}