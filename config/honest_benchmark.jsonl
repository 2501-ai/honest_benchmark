{"id": "honest_1", "input": "change the background to red using tailwind", "test_script": "output = \"PASS\" if \"bg-red\" in open('./datasets/honest_1/index.html').read() or \"background: red\" in open('./datasets/honest_1/src/output.css').read() or \"background-color:red\" in open('./datasets/honest_1/src/output.css').read() else \"FAIL\"", "tags": ["frontend", "html", "css"]}
{"id": "honest_2", "input": "analyse and reorder the flight log by departure_date_time \\(formatted as date\\) in ascending order, into a new file named flight_logs_sorted.csv", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_2/flight_logs_sorted.csv') and open('./datasets/honest_2/flight_logs_sorted.csv').readlines()[1].startswith('4162') else \"FAIL\"", "tags": ["excel", "csv", "data"]}
{"id": "honest_3", "input": "reorganize the folder, docs in documents, jpg, png in images, etc.", "test_script": "import os; output = \"PASS\" if os.path.isdir(\"./datasets/honest_3/documents\") and os.path.isfile(\"./datasets/honest_3/documents/executive_summary.docx\") else \"FAIL\"", "tags": ["shell", "filesystem", "commands", "devops"]}
{"id": "honest_4", "input": "convert all jpg images in the folder to png. dont keep original files and conversion scripts \\(if any\\)", "test_script": "import os; output = \"PASS\" if all(f.endswith('.png') for f in os.listdir('./datasets/honest_4/')) else \"FAIL\"", "tags": ["shell", "filesystem", "images"]}
{"id": "honest_5", "input": "fix the script and run it", "test_script": "import subprocess, sys; result = subprocess.run(['python3', './datasets/honest_5/script.py']); output = \"PASS\" if result.returncode == 0 else \"FAIL\"", "tags": ["python", "images"]}
{"id": "honest_6", "input": "install the dependencies, then install jest, ts-jest and add a few unit tests without coverage in auth.test.ts. Modify only auth.test.ts. Make sure the tests pass", "test_script": "import subprocess; import os; output = \"PASS\" if subprocess.run([\"npm\", \"run\", \"test\"], cwd='./datasets/honest_6').returncode == 0 else \"FAIL\";", "tags": ["javascript", "typescript", "jest", "unit-test", "test"]}
{"id": "honest_7", "input": "clone the repo https://github.com/iamkun/dayjs", "test_script": "import os; output = \"PASS\" if os.path.isdir(\"./datasets/honest_7/dayjs/src\") else \"FAIL\"", "tags": ["git", "github", "javascript", "typescript", "jest", "unit-test", "test"]}
{"id": "honest_8", "input": "crop the image in the folder to 1024*1024 \\(using PIL for example\\), the output must be a copy with the name image_1024.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_8/image_1024.png\") and (lambda f: (f.seek(16), struct.unpack('>II', f.read(8))) == (16, (1024, 1024)))(open(\"./datasets/honest_8/image_1024.png\", 'rb')) else \"FAIL\"", "tags": ["python", "image", "crop"]}
{"id": "honest_9", "input": "download the large file at this address https://2501-ai.s3.ap-northeast-1.amazonaws.com/benchmark/honest_9/example100mb.txt with curl and chunk it into smaller files of exactly 10mb using python", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir(\"./datasets/honest_9\") if not f.endswith(\".py\") and not f == \"example100mb.txt\"])==11 else \"FAIL\"", "tags": ["shell", "python", "filesystem"]}
{"id": "honest_10", "input": "create a zip archive of the folder contents called archive.zip", "test_script": "import os; output = \"PASS\" if os.path.isfile(\"./datasets/honest_10/archive.zip\") else \"FAIL\"", "tags": ["shell", "filesystem", "compression"]}
{"id": "honest_11", "input": "convert the text file to uppercase and save it as uppercase.txt", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_11/uppercase.txt') and open('./datasets/honest_11/uppercase.txt').read().isupper() else \"FAIL\"", "tags": ["python", "filesystem", "text"]}
{"id": "honest_12", "input": "count the number of lines in example.txt. save your answer containing only the number of lines in a result.txt file.", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_12/result.txt') and open('./datasets/honest_12/result.txt') == \"100\" else \"FAIL\"", "tags": ["shell", "python", "filesystem"]}
{"id": "honest_13", "input": "generate a random password of length 12 and save it in password.txt", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_13/password.txt') and len(open('./datasets/honest_13/password.txt').read().strip()) == 12 else \"FAIL\"", "tags": ["python", "security", "random"]}
{"id": "honest_14", "input": "create a new virtual environment \\(using venv\\, in a local \\'venv\\' folder\\) and install requests library", "test_script": "import subprocess; output = \"PASS\" if os.path.exists('./datasets/honest_14/venv/bin/python') and subprocess.run(['./datasets/honest_14/venv/bin/python', '-c', 'import requests']).returncode == 0 else \"FAIL\"", "tags": ["python", "virtualenv", "pip"]}
{"id": "honest_15", "input": "create a bar chart from the data in data.csv and save it as chart.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_15/chart.png\") else \"FAIL\"", "tags": ["python", "matplotlib", "chart"]}
{"id": "honest_16", "input": "scrape the title of the webpage at https://example.com and save it in title.txt", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_16/title.txt') and 'Example Domain' in open('./datasets/honest_16/title.txt').read() else \"FAIL\"", "tags": ["python", "webscraping", "beautifulsoup"]}
{"id": "honest_17", "input": "initilize a git repository here and make an initial commit with the following message: \"first commit from AI\"", "test_script": "import subprocess; output = \"PASS\" if subprocess.run('git  log --reverse --format=\"%s\" | head -n 1',cwd='./datasets/honest_17', shell=True, capture_output=True, text=True).stdout.strip() == \"first commit from AI\" else \"FAIL\"", "tags": ["git", "github", "version-control"]}
{"id": "honest_18", "input": "initilize a git repository here and checkout a new branch named feature-1", "test_script": "import subprocess; output = \"PASS\" if subprocess.run('git branch --show-current',cwd='./datasets/honest_18', shell=True, capture_output=True, text=True).stdout.strip() == 'feature-1' else \"FAIL\"", "tags": ["git", "github", "version-control"]}
{"id": "honest_19", "input": "compress all python files in the folder using gzip", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir('./datasets/honest_19/') if f.endswith('.gz')]) == 3 else \"FAIL\"", "tags": ["shell", "filesystem", "compression"]}
{"id": "honest_20", "input": "rotate the image in the folder by 90 degrees and save it as rotated.png", "test_script": "output = \"PASS\" if os.path.isfile(\"./datasets/honest_20/rotated.png\") else \"FAIL\"", "tags": ["python", "PIL", "image", "rotation"]}
{"id": "honest_21", "input": "parse the data.json file and extract ALL unique keys \\(keys that appear only in one of the objects\\) and save them as an array of strings in a unique_keys.json file", "test_command": "python ./scripts/test_unique_keys.py ./datasets/honest_21/unique_keys.json", "tags": ["python", "filesystem", "json"]}
{"id": "honest_22", "input": "rename all .txt files to .log in the folder", "test_script": "import os; output = \"PASS\" if all(f.endswith('.log') and os.path.isfile(os.path.join('./datasets/honest_22/', f)) for f in os.listdir('./datasets/honest_22/')) else \"FAIL\"", "tags": ["shell", "filesystem", "rename"]}
{"id": "honest_23", "input": "implement a nodejs \\'hello.js\\' script to reverse and log a string", "test_script": "import subprocess;output = \"PASS\" if subprocess.run(['node', 'hello.js', 'hello'], cwd='./datasets/honest_23', timeout=1, capture_output=True, text=True).stdout.strip() == 'olleh' else \"FAIL\"", "tags": ["javascript", "programming", "functions"]}
{"id": "honest_24", "input": "'Write a Python function that solves the Longest Increasing Subsequence \\(LIS\\) problem using dynamic programming in a longest_increasing_subsequence.py file. The function should accept an array of integers as input and return the length of the longest increasing subsequence.\n\nThe input array will be passed as a command-line argument in the form of a comma-separated list. Your task is to:\n\nParse the input argument.\nCompute the length of the longest increasing subsequence using dynamic programming.\nPrint only the LIS length, nothing else.\nRequirements:\nThe script should be invoked from the command line, with the array passed as an argument.\nThe script should parse the argument, handle edge cases \\(e.g., empty input\\) exit with code 1 in these cases, and compute the correct LIS length.'", "test_script": "import subprocess; result = subprocess.run(['python', 'scripts/test_lis_solution.py']); output = 'PASS' if result.returncode == 0 else 'FAIL'", "tags": ["python", "programming"]}
{"id": "honest_25", "input": "Create a Dockerfile to run a simple Python web server and make sure it builds", "test_script": "import subprocess; output = \"PASS\" if subprocess.run(['docker', 'build', './datasets/honest_25']).returncode == 0 else \"FAIL\"", "tags": ["docker", "devops", "containers"]}
{"id": "honest_26", "input": "write a bash script word_count.sh that outputs in stdout the number of words from a file given as first argument", "test_script": "import subprocess;output = \"PASS\" if subprocess.run(['bash', 'word_count.sh', 'words.txt'], cwd='./datasets/honest_26', capture_output=True, text=True).stdout.strip() == '10' else \"FAIL\"", "tags": ["bash", "shell", "script", "linux"]}
{"id": "honest_27", "input": "create a pie chart file \\'pie_chart.png\\' using Python\\'s matplotlib with the given data. Just generate the file, don\\'t open it.", "test_script": "import os;output = \"PASS\" if os.path.isfile(\"./datasets/honest_27/pie_chart.png\") else \"FAIL\"", "tags": ["python", "matplotlib", "chart"]}
{"id": "honest_28", "input": "Summarize the text of sample.txt into 1\\-2 sentences, and write it in plain text in a summary.txt file", "test_command": "python ./scripts/test_sentences_count.py", "tags": ["text", "summary"]}
{"id": "honest_29", "input": "Classify the sentiment of each sentence of sample.txt yourself: positive, negative or neutral. Dont use a script and save the final result in comma separated values in a result.txt file", "test_command": "python ./scripts/test_sentiment.py", "tags": ["sentiment", "text", "summary"]}
{"id": "honest_30", "input": "make a div element with 100% width using css using index.html and style.css files", "test_script": "output = \"PASS\" if \"w-full\" in open('./datasets/honest_30/index.html').read() or \"width: 100%\" in open('./datasets/honest_30/style.css').read() else \"FAIL\"", "tags": ["frontend", "html", "css"]}
{"id": "honest_31", "input": "move all the files of the previous_version folder to the new_version folder.", "test_script": "import os; output = \"PASS\" if len(os.listdir('./datasets/honest_31/previous_version')) == 0 and len(os.listdir('./datasets/honest_31/new_version')) == 2 else \"FAIL\"", "tags": ["shell", "filesystem"]}
{"id": "honest_32", "input": "search for a picture \\(jpg or png\\) of mariokart from google images search using search_and_download_image.py and download it", "test_script": "import os; output = \"PASS\" if len([f for f in os.listdir('./datasets/honest_32') if (f.endswith('.png') or f.endswith('.jpg'))]) > 0 else \"FAIL\"", "tags": ["shell", "filesystem", "python", "programming"]}
{"id": "honest_33", "input": "create a hello.txt file with \\'hello world\\' content", "test_script": "output = \"PASS\" if open('./datasets/honest_33/hello.txt').read().strip() == 'hello world' else \"FAIL\"", "tags": ["filesystem", "text"]}
{"id": "honest_34", "input": "I can't find the password, it's somewhere in the files. Can you find it and save it in a password.txt file", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_34/password.txt') and open('./datasets/honest_34/password.txt').read().strip() == 'password123' else \"FAIL\"", "tags": ["filesystem", "text", "shell"]}
{"id": "honest_35", "input": "Change the font color to blue using CSS", "test_script": "output = \"PASS\" if 'color: blue;' in open('./datasets/honest_35/style.css').read() else \"FAIL\"", "tags": ["css", "web"]}
{"id": "honest_36", "input": "Rename all files in the folder with a \\'data_\\' prefix", "test_script": "import os; output = \"PASS\" if all(f.startswith('data_') for f in os.listdir('./datasets/honest_36')) else \"FAIL\"", "tags": ["filesystem", "shell"]}
{"id": "honest_37", "input": "Parse the error logs, filter those with ERROR level, and store them in error_logs.txt", "test_script": "output = \"PASS\" if all('ERROR' in line for line in open('./datasets/honest_37/error_logs.txt')) else \"FAIL\"", "tags": ["logs", "filesystem"]}
{"id": "honest_38", "input": "Convert all mp4 videos in the folder to avi format, and remove original files", "test_script": "import os; output = \"PASS\" if all(f.endswith('.avi') for f in os.listdir('./datasets/honest_38')) and not any(f.endswith('.mp4') for f in os.listdir('./datasets/honest_38')) else \"FAIL\"", "tags": ["video", "filesystem"]}
{"id": "honest_39", "input": "Find all TODO comments in the codebase and list them in todos.txt. Dont prose or comment", "test_script": "output = \"PASS\" if open('./datasets/honest_39/todos.txt').read().count('TODO') == 5 else \"FAIL\"", "tags": ["code", "filesystem"]}
{"id": "honest_40", "input": "Install the project dependencies, add a Dockerfile for containerization, and build the image", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_40/Dockerfile') else \"FAIL\"", "tags": ["docker", "dependencies"]}
{"id": "honest_41", "input": "Look at the customers dataset and split it into training.csv and testing.csv sets", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_41/training.csv') and os.path.exists('./datasets/honest_41/testing.csv') else \"FAIL\"", "tags": ["excel", "csv", "data", "python"]}
{"id": "honest_42", "input": "Resize all images in the folder to 800x600 and save them as new files with a '_resized' suffix and remove original files and python scripts", "test_script": "import os; output = \"PASS\" if all('_resized' in f for f in os.listdir('./datasets/honest_42')) else \"FAIL\"", "tags": ["image", "filesystem"]}
{"id": "honest_43", "input": "Run the linting tool and automatically fix any linting issues in the code, and output 'linting issues fixed' in lint_report.txt report if the issues were fixed", "test_script": "output = \"PASS\" if not 'error' in open('./datasets/honest_43/lint_report.txt').read() else \"FAIL\"", "tags": ["linting", "code"]}
{"id": "honest_44", "input": "Find and delete all files with a .tmp extension in the folder", "test_script": "import os; output = \"PASS\" if not any(f.endswith('.tmp') for f in os.listdir('./datasets/honest_44')) else \"FAIL\"", "tags": ["filesystem", "shell"]}
{"id": "honest_45", "input": "Install TypeScript, create a tsconfig.json, and compile a basic hello.ts file in a dist folder.", "test_script": "output = \"PASS\" if os.path.exists('./datasets/honest_45/dist/hello.js') else \"FAIL\"", "tags": ["typescript", "compile"]}
{"id": "honest_46", "input": "Merge all Excel files from the `reports/` folder into a single 'merged_report.xlsx' file", "test_script": "import os; output = \"PASS\" if os.path.exists('./datasets/honest_46/merged_report.xlsx') else \"FAIL\"", "tags": ["excel", "merge"]}
{"id": "honest_47", "input": "Read the xlsx doc from and give me the list of projects that are 100% complete. store them in a list.txt file", "test_command": "python ./scripts/test_lines_count.py", "tags": ["excel", "data"]}
{"id": "honest_48", "input": "Create a RESTful API using Flask in a single app.py file with the following specifications:\n1. Use Flask and Flask-RESTful\n2. Implement a 'users' resource with the following endpoints:\n   a. GET /users - Retrieve all users\n   b. GET /users/<id> - Retrieve a specific user\n   c. POST /users - Create a new user\n   d. PUT /users/<id> - Update a user\n   e. DELETE /users/<id> - Delete a user\n3. Use a simple in-memory data structure \\(e.g., a list or dictionary\\) to store users\n4. Each user should have 'id', 'name', and 'email' fields\n5. Implement proper error handling and return appropriate HTTP status codes\n6. Use JSON for request and response data\n7. Include a brief docstring for each endpoint function", "test_command": "python scripts/test_flask_api.py", "tags": ["python", "flask", "api", "rest", "flask-restful"]}
{"id": "honest_49", "input": "Create a valid JSON file 'data.json' containing fifty random user information", "test_script": "import json; output = \"PASS\" if json.load(open('./datasets/honest_49/data.json')) else \"FAIL\"", "tags": ["json", "data", "parsing"]}
{"id": "honest_50", "input": "Create a React component 'DataTable.js' that fetches data from an API and displays it in a table format with sorting capabilities.", "test_script": "import os; output = 'PASS' if os.path.exists('./datasets/honest_50/DataTable.js') else 'FAIL'", "tags": ["javascript", "react", "api", "frontend"]}
{"id": "honest_51", "input": "Task: Process \\'docker_log.txt\\' to resolve a complex error. 1. Generate \\'find_errors.py\\': - Create an optimized Python script that efficiently scans \\'docker_log.txt\\' to locate and extract all hidden error message. - Optimize for performance given the large file size. - Use best coding practices and include comments explaining the logic. 2. Produce \\'repairs.txt\\': - From the file \\'repairs.txt\\', for each error, provide a suitable technical solution  - Include precise, step-by-step instructions with relevant commands, configurations, or code snippets. - Ensure explanations are technical and suitable for an experienced system administrator or developer. - Avoid oversimplified explanations and ensure all steps are clear and actionable. Constraints: Optimize for performance and technical accuracy. Avoid simplistic explanations", "test_command": "python ./scripts/log_repairs_verification.py", "tags": ["docker", "logs", "erreurs"]}
{"id": "honest_55", "input": "Create a Dockerfile that sets up a MongoDB instance with a vulnerability by disabling authentication and exposing port 27017. Make sure the Docker container is named \\'mongo_vulnerable\\'. After the container is running, write a Python script named \\'hack_mongo.py\\' that connects to this MongoDB instance, creates a database named \\'hacked_db\\', and inserts a playful message in a collection named \\'fun\\'. The script should log the attack in \\'attack_log.txt\\'.", "test_command": "python scripts/validate_attack_mongo_port.py", "tags": ["python", "cybersecurity", "hacking", "docker", "mongodb"] }
{"id": "honest_56", "input": "Create a docker-compose.yml file that sets up a 3-tier application with: nginx:latest as frontend \\(port 80\\), a Python Flask API using python:3.9-slim \\(port 5000\\), and redis:latest as backend \\(port 6379\\). All services should be in the same network and include proper healthchecks. Use service names \\'frontend\\', \\'api\\', and \\'redis\\'.", "test_script": "import sys; sys.path.append('./scripts'); import test_docker_compose; test_docker_compose.validate_docker_compose()", "tags": ["docker", "docker-compose", "microservices"]}
{"id": "honest_57", "input": "Create a Terraform configuration \\(main.tf\\) that defines a local Docker network and three containers: \\'web\\' \\(nginx:latest\\), \\'app\\' \\(python:3.9-slim\\), and \\'db\\' \\(postgres:13\\) connected to it. Include the docker provider configuration, proper resource dependencies using depends_on, and appropriate environment variables for each container. The network should be named \\'app_network\\' and all containers should use networks_advanced to connect to it.", "test_script": "import sys; sys.path.append('./scripts'); import test_terraform_docker; test_terraform_docker.validate_terraform_config()", "tags": ["terraform", "iac", "docker"]}
{"id": "honest_58", "input": "Create an HAProxy configuration file \\(haproxy.cfg\\) that load balances requests between three Python web servers. Requirements:\n- Frontend should bind to port 80\n- Backend servers on ports 8081, 8082, and 8083\n- Use round-robin algorithm\n- Include health checks with interval, rise, and fall parameters\n- Configure global maxconn and logging\n- Set up proper defaults section with mode http\n- Name the backend \\'web_backend\\'\n- Each server must have health checks enabled", "test_script": "import sys; sys.path.append('./scripts'); import test_haproxy_config; test_haproxy_config.validate_haproxy_config()", "tags": ["haproxy", "load-balancing", "networking"]}
{"id": "honest_59", "input": "Create a Consul configuration \\(consul-config.json\\) that registers and discovers three local services: \\'web\\' on port 8080, \\'api\\' on port 3000, and \\'cache\\' on port 6379. Each service should include health checks and metadata with 'version' and \\'environment\\'. The node should be named \\'local-node\\' in datacenter \\'dc1\\'. Enable the UI and Connect features.", "test_script": "import sys; sys.path.append('./scripts'); import test_consul_config; test_consul_config.validate_consul_config()", "tags": ["consul", "service-discovery", "microservices"]}
{"id": "honest_60", "input": "Set up a local monitoring stack using Docker Compose with the following requirements:\n\n1. Prometheus configuration \\(prometheus.yml\\):\n- Configure global scrape interval\n- Add scrape jobs for both Prometheus \\(port 9090\\) and Node Exporter \\(port 9100\\)\n- Use proper static_configs with targets\n\n2. Docker Compose configuration \\(docker-compose.yml\\):\n- Prometheus service using prom/prometheus:latest\n  * Mount prometheus.yml as volume\n  * Expose port 9090\n- Grafana service using grafana/grafana:latest\n  * Expose port 3000\n  * Depend on prometheus service\n- Node Exporter service using prom/node-exporter:latest\n  * Expose port 9100", "test_script": "import sys; sys.path.append('./scripts'); import test_monitoring_stack; test_monitoring_stack.main()", "tags": ["monitoring", "prometheus", "grafana", "docker"]}